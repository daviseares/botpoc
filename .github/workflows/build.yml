name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=daviseares_botpoc
            -Dsonar.organization=daviseares
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
      - name: Generate SonarQube Report
        run: |
          # Comando fictício para gerar o arquivo JSON com os resultados do SonarQube
          sonar-scanner -Dsonar.analysis.mode=preview -Dsonar.report.export.path=sonar-report.json
      - name: Create GitHub Review Comments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Exemplo de script shell para criar comentários de revisão
          # Ler o arquivo JSON com os resultados do SonarQube
          if [ ! -f sonar-report.json ]; then
            echo "Arquivo sonar-report.json não encontrado!"
            exit 1
          fi
          
          sonar_results=$(cat sonar-report.json)
          
          # Iterar sobre os problemas encontrados e criar comentários de revisão
          echo "$sonar_results" | jq -c '.issues[]' | while read issue; do
            file_path=$(echo "$issue" | jq -r '.component')
            line=$(echo "$issue" | jq -r '.line')
            message=$(echo "$issue" | jq -r '.message')
            
            # Criar comentário de revisão usando a API do GitHub
            curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments \
              -d "$(jq -n --arg body "$message" --arg commit_id "${{ github.event.pull_request.head.sha }}" --arg path "$file_path" --argjson position "$line" \
              '{body: $body, commit_id: $commit_id, path: $path, position: $position}')"
          done